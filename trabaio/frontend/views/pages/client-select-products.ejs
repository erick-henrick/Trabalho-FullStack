<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : 'DomesticPets - Nossos Produtos' %></title>
    <link rel="stylesheet" href="/style.css"> {/* Mantido */}
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="/css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>

    <style>
        /* Estilos que você forneceu, mantidos aqui. Mova para /style.css se preferir. */
        .products-container { max-width: 1200px; margin: 20px auto; padding: 20px; background-color: #fff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .products-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 20px; }
        .product-card { border: 1px solid #eee; border-radius: 6px; padding: 15px; text-align: center; display: flex; flex-direction: column; justify-content: space-between; }
        .product-card img { max-width: 100%; height: 150px; object-fit: contain; margin-bottom: 10px; border-radius: 4px; } /* Ajustado para card-image do Materialize */
        .product-name { font-size: 1.1rem; font-weight: 600; margin-bottom: 5px; }
        .product-price { font-size: 1.2rem; color: #F57C00; font-weight: bold; margin-bottom: 10px; }
        /* .product-add-cart-btn { width: 100%; } */ /* Removido, pois btn do Materialize ocupa a largura necessária com .card-action */
        .products-search-filters { margin-bottom: 20px; padding-bottom: 20px; border-bottom: 1px solid #eee; display: flex; gap: 15px; align-items: center; }
        .products-search-bar { flex-grow: 1; display: flex; }
        /* .products-search-bar input { flex-grow: 1; margin-right: -1px; } */ /* Ajustado pelo Materialize input-field */
        .products-pagination { display: flex; justify-content: center; margin-top: 30px; }
        /* .products-pagination button { margin: 0 5px; } */ /* Estilizado pelo Materialize */
        .error-message { color: red; text-align: center; margin-top: 20px; }

        /* Ajustes para Materialize card */
        .product-card.card .card-image img { border-radius: 0; /* Materialize card-image cuida disso */ }
        .product-card.card .card-content { padding: 10px; flex-grow: 1; }
        .product-card.card .card-content .card-title { font-size: 1.1rem; line-height: 1.3; margin-bottom: 5px; font-weight: 600; }
        .product-card.card .card-action { padding: 10px; }
    </style>
</head>
<body>
    <div class="products-container">
        <h1 style="text-align: center; color: #F57C00; margin-bottom: 30px;"><%= typeof title !== 'undefined' ? title : 'Nossos Produtos' %></h1>
        
        <% if (typeof error !== 'undefined' && error && error.length > 0) { %>
            <div class="row">
                <div class="col s12">
                    <p class="error-message"><%= error %></p>
                </div>
            </div>
        <% } %>

        <div class="products-search-filters">
            <div class="products-search-bar input-field" style="flex-grow: 1;">
                <input type="text" id="searchInput" placeholder="Pesquisar produtos por nome, marca...">
                <label for="searchInput">Pesquisar</label> 
            </div>
            <button id="searchButton" class="btn waves-effect waves-light orange"><i class="material-icons">search</i></button>
        </div>

        <div class="products-grid" id="productGrid">
            </div>

        <div class="products-pagination center-align" id="pagination">
             </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const productGrid = document.getElementById('productGrid');
        const paginationContainer = document.getElementById('pagination');
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');

        // Para teste HTML puro, substitua a linha abaixo por dados mockados.
        // Para EJS, esta linha busca os dados passados pela rota.
        const allProductsOriginal = <%- typeof produtos !== 'undefined' && produtos ? JSON.stringify(produtos) : '[]' %>;
        /* Exemplo de dados mockados para teste HTML:
        const allProductsOriginal = [
            { id: '1', nome: 'Ração Super Cat', descricao: 'Deliciosa ração para gatos exigentes.', preco: 55.90, marca: 'CatChow', categoria: 'Alimento Seco', animal: 'Gato', images: ['/img/placeholder.png'] },
            { id: '2', nome: 'Arranhador Torre', descricao: 'Arranhador vertical com brinquedo.', preco: 120.00, marca: 'PetFun', categoria: 'Brinquedo', animal: 'Gato', images: ['/img/placeholder.png'] },
            { id: '3', nome: 'Coleira Anti-Pulgas Dog', descricao: 'Proteção por até 8 meses.', preco: 89.90, marca: 'Seresto', categoria: 'Saúde', animal: 'Cachorro', images: ['/img/placeholder.png'] }
        ];
        */
        
        const allProducts = allProductsOriginal.map(p => ({
            ...p,
            id: String(p.id),
            price: parseFloat(p.preco) || 0,
            name: p.nome || 'Produto sem nome',
            description: p.descricao || 'Sem descrição',
            brand: p.brand || p.marca || "",
            category: p.categoria || 'N/A',
            animal: p.animal || 'N/A',
            images: Array.isArray(p.images) ? p.images : (p.images ? [String(p.images)] : [])
        }));

        let currentFilteredProducts = [...allProducts];
        let currentPage = 1;
        const itemsPerPage = 8;

        function renderProducts() {
            productGrid.innerHTML = '';
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const paginatedProducts = currentFilteredProducts.slice(start, end);

            if (paginatedProducts.length === 0) {
                productGrid.innerHTML = '<p style="text-align: center; color: #777; grid-column: 1 / -1; padding:20px;">Nenhum produto encontrado.</p>';
                renderPagination();
                return;
            }

            paginatedProducts.forEach(product => {
                const productCardWrapper = document.createElement('div'); // Wrapper para o grid
                // productCardWrapper.classList.add('col', 's12', 'm6', 'l4'); // Para layout responsivo Materialize no grid
                
                const productCard = document.createElement('div');
                productCard.classList.add('product-card', 'card'); // Adicionada classe 'card' do Materialize

                const firstImage = (product.images && product.images.length > 0 && product.images[0]) 
                                   ? product.images[0] 
                                   : '/img/no-image.png';

                // Estrutura interna do card adaptada para Materialize e mantendo suas classes
                productCard.innerHTML = `
                    <div class="card-image">
                        <img src="${firstImage}" alt="${product.name}" style="max-height: 150px; object-fit: contain; padding-top:10px;">
                        ${'' /* <span class="card-title">${product.name}</span>  Removido para não sobrepor */}
                    </div>
                    <div class="card-content">
                        <p class="product-name" style="font-size: 1.1rem; font-weight: bold;">${product.name}</p>
                        ${product.brand ? `<p class="product-brand" style="font-size: 0.8rem; color: #757575;">${product.brand}</p>` : ''}
                        <p class="product-description" style="font-size: 0.9rem; min-height: 40px;">${product.description.substring(0, 60)}${product.description.length > 60 ? '...' : ''}</p>
                        <p class="product-price" style="font-size: 1.2rem; color: #F57C00; font-weight: bold;">R$ ${(product.price).toFixed(2).replace('.', ',')}</p>
                        <p class="product-category" style="font-size: 0.8rem; color: #777;">${product.category} ${product.animal ? `| ${product.animal}`:''}</p>
                    </div>
                    <div class="card-action">
                        <button class="btn waves-effect waves-light orange product-add-cart-btn" style="width:100%;"
                                data-product-id="${product.id}"
                                data-product-name="${product.name}"
                                data-product-price="${product.price}"
                                data-product-image="${firstImage}">
                            Adicionar <i class="material-icons right tiny">add_shopping_cart</i>
                        </button>
                    </div>
                `;
                // productCardWrapper.appendChild(productCard);
                productGrid.appendChild(productCard); // Adiciona diretamente ao grid
            });
            renderPagination();
        }

        function renderPagination() {
            paginationContainer.innerHTML = '';
            const totalPages = Math.ceil(currentFilteredProducts.length / itemsPerPage);

            if (totalPages <= 1) return;

            const ul = document.createElement('ul');
            ul.className = 'pagination'; // Classe do Materialize

            // Botão Anterior
            const prevLi = document.createElement('li');
            prevLi.className = (currentPage === 1) ? 'disabled' : 'waves-effect';
            const prevA = document.createElement('a');
            prevA.innerHTML = '<i class="material-icons">chevron_left</i>';
            prevA.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    renderProducts();
                }
            });
            prevLi.appendChild(prevA);
            ul.appendChild(prevLi);

            // Botões de Página
            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = (i === currentPage) ? 'active orange' : 'waves-effect'; // Estilo Materialize
                const pageA = document.createElement('a');
                pageA.textContent = i;
                pageA.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = i;
                    renderProducts();
                });
                pageLi.appendChild(pageA);
                ul.appendChild(pageLi);
            }

            // Botão Próximo
            const nextLi = document.createElement('li');
            nextLi.className = (currentPage === totalPages) ? 'disabled' : 'waves-effect';
            const nextA = document.createElement('a');
            nextA.innerHTML = '<i class="material-icons">chevron_right</i>';
            nextA.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage < totalPages) {
                    currentPage++;
                    renderProducts();
                }
            });
            nextLi.appendChild(nextA);
            ul.appendChild(nextLi);

            paginationContainer.appendChild(ul);
        }
        
        function applyFiltersAndRender() {
            let productsToFilter = [...allProducts];
            const searchTerm = searchInput.value.toLowerCase().trim();

            if (searchTerm) {
                productsToFilter = productsToFilter.filter(product =>
                    (product.name && product.name.toLowerCase().includes(searchTerm)) ||
                    (product.brand && product.brand.toLowerCase().includes(searchTerm)) ||
                    (product.description && product.description.toLowerCase().includes(searchTerm)) ||
                    (product.category && product.category.toLowerCase().includes(searchTerm)) ||
                    (product.animal && product.animal.toLowerCase().includes(searchTerm))
                );
            }
            currentFilteredProducts = productsToFilter;
            currentPage = 1;
            renderProducts();
        }

        function addToCart(item) {
            let cart = JSON.parse(localStorage.getItem('shoppingCart')) || [];
            const existingItemIndex = cart.findIndex(cartItem => String(cartItem.id) === String(item.id) && cartItem.type === 'product');

            if (existingItemIndex > -1) {
                cart[existingItemIndex].quantity = (cart[existingItemIndex].quantity || 0) + 1;
            } else {
                cart.push(item); // item já vem com quantity: 1
            }
            localStorage.setItem('shoppingCart', JSON.stringify(cart));
            updateCartBadge();
            
            if (typeof M !== 'undefined' && M.toast) { 
              M.toast({ html: `${item.name} adicionado ao carrinho!`, classes: 'green rounded' });
            } else {
              alert(`${item.name} adicionado ao carrinho!`);
            }
        }

        function updateCartBadge() {
            const cart = JSON.parse(localStorage.getItem('shoppingCart')) || [];
            const cartBadges = document.querySelectorAll('#cart-badge, #cart-badge-mobile'); 

            let totalItems = 0;
            cart.forEach(item => {
                totalItems += (item.quantity || 1);
            });

            cartBadges.forEach(badge => {
                if (badge) {
                    badge.textContent = totalItems > 0 ? String(totalItems) : '';
                    badge.setAttribute('data-badge-caption', totalItems > 0 ? String(totalItems) : ''); 
                    
                    if (totalItems > 0) {
                        badge.style.display = 'inline-block';
                        badge.classList.add('new'); 
                    } else {
                        badge.style.display = 'none';
                        badge.classList.remove('new');
                    }
                }
            });
        }
        
        productGrid.addEventListener('click', function(event) {
            const button = event.target.closest('.product-add-cart-btn');
            if (button) {
                const productItem = {
                    id: button.dataset.productId,
                    name: button.dataset.productName,
                    price: parseFloat(button.dataset.productPrice),
                    type: 'product',
                    quantity: 1, 
                    image: button.dataset.productImage
                };
                addToCart(productItem);
            }
        });

        searchButton.addEventListener('click', applyFiltersAndRender);
        searchInput.addEventListener('keyup', (event) => {
            if (event.key === 'Enter') {
                applyFiltersAndRender();
            }
        });

        applyFiltersAndRender(); 
        updateCartBadge(); 

        // Inicializar componentes Materialize se necessário (ex: selects para filtros futuros)
        // if (typeof M !== 'undefined') {
        //   M.AutoInit(); // Ou M.FormSelect.init(document.querySelectorAll('select'));
        // }
    });
    </script>
</body>
</html>